name: Build Arch Linux Cloud Images
on:
  schedule:
    - cron: "34 19 * * *"
  workflow_dispatch:

jobs:
  build_archlinux_cloud_images:
    runs-on: pve-1
    steps:
      - uses: actions/checkout@v2

      - name: check path
        run: |
          pwd

      - name: Configure Git
        run: |
          git config --global user.name "daily-update"
          git config --global user.email "tg@spiritlhl.top"

      - name: Environment preparation
        run: |
          export LIBGUESTFS_DEBUG=1
          export LIBGUESTFS_TRACE=1
          export LIBGUESTFS_BACKEND=direct
          export LIBGUESTFS_BACKEND_SETTINGS="passt:no"
          sudo apt-get update
          sudo apt-get install -y curl wget unzip zip jq
          sudo apt-get install -y libguestfs-tools rng-tools curl axel
          sudo apt-get install -y libguestfs-tools rng-tools curl axel --fix-missing

      - name: Build Arch Linux Images
        run: |
          echo "=== Processing Arch Linux ==="
          rm -f archlinux.qcow2 archlinux-custom.qcow2 archlinux-latest.qcow2
          echo "Downloading Arch Linux Cloud Image"
          download_url="https://geo.mirror.pkgbuild.com/images/latest/Arch-Linux-x86_64-cloudimg.qcow2"
          axel -n 8 -o archlinux.qcow2 "$download_url"
          if [ $? -ne 0 ]; then
              echo "Axel failed, trying with curl"
              curl -o archlinux.qcow2 "$download_url"
              if [ $? -ne 0 ]; then
                  echo "Failed to download Arch Linux, exiting..."
                  exit 1
              fi
          fi
          if [ ! -f "archlinux.qcow2" ] || [ $(stat -c %s "archlinux.qcow2") -lt 10485760 ]; then
              echo "Download failed or file too small for Arch Linux, exiting..."
              rm -f archlinux.qcow2
              exit 1
          fi
          chmod 644 archlinux.qcow2
          echo "Checking image info..."
          virt-filesystems -a archlinux.qcow2 --long -h --uuid
          echo "Resizing Arch Linux image..."
          qemu-img resize archlinux.qcow2 +2G
          echo "Creating expanded image with proper partition resizing..."
          qemu-img create -f qcow2 archlinux-expanded.qcow2 4G
          virt-resize --expand /dev/sda3 archlinux.qcow2 archlinux-expanded.qcow2
          if [ $? -ne 0 ]; then
              echo "virt-resize failed, trying alternative approach..."
              cp archlinux.qcow2 archlinux-expanded.qcow2
              qemu-img resize archlinux-expanded.qcow2 +2G
          fi
          echo "Customizing Arch Linux image - Phase 1: Basic Setup"
          virt-customize -a archlinux-expanded.qcow2 \
            --smp 1 \
            --timezone Asia/Hong_Kong \
            --append-line "/etc/default/grub:# disables OS prober to avoid loopback detection which breaks booting" \
            --append-line "/etc/default/grub:GRUB_DISABLE_OS_PROBER=true"
          if [ $? -ne 0 ]; then
              echo "Failed to setup basic configuration, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          
          echo "Customizing Arch Linux image - Phase 2: GRUB and Services"
          virt-customize -a archlinux-expanded.qcow2 \
            --run-command "grub-mkconfig -o /boot/grub/grub.cfg" \
            --run-command "systemctl enable serial-getty@ttyS1.service" \
            --run-command "sync"
          if [ $? -ne 0 ]; then
              echo "Failed to configure GRUB and services, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          
          echo "Customizing Arch Linux image - Phase 3: Initialize Package Manager"
          virt-customize -a archlinux-expanded.qcow2 \
            --run-command "pacman-key --init" \
            --run-command "sync"
          if [ $? -ne 0 ]; then
              echo "Failed to initialize pacman keys, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          
          echo "Customizing Arch Linux image - Phase 4: Populate Keys"
          virt-customize -a archlinux-expanded.qcow2 \
            --run-command "pacman-key --populate archlinux" \
            --run-command "sync"
          if [ $? -ne 0 ]; then
              echo "Failed to populate pacman keys, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          
          echo "Customizing Arch Linux image - Phase 5: Update Keyring"
          virt-customize -a archlinux-expanded.qcow2 \
            --run-command "pacman -Sy --noconfirm archlinux-keyring" \
            --run-command "sync"
          if [ $? -ne 0 ]; then
              echo "Failed to update keyring, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          
          echo "Customizing Arch Linux image - Phase 6: System Update"
          virt-customize -a archlinux-expanded.qcow2 \
            --run-command "pacman -Syu --noconfirm" \
            --run-command "sync"
          if [ $? -ne 0 ]; then
              echo "Failed to update system, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          
          echo "Installing essential packages..."
          virt-customize -a archlinux-expanded.qcow2 \
            --run-command "pacman -S --noconfirm cloud-guest-utils qemu-guest-agent" \
            --run-command "sync"
          if [ $? -ne 0 ]; then
              echo "Failed to install essential packages, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          
          echo "Installing additional packages..."
          virt-customize -a archlinux-expanded.qcow2 \
            --run-command "pacman -S --noconfirm sudo spice-vdagent bash-completion unzip wget curl axel net-tools iputils nano screen less vim bzip2 htop bind zstd cronie lsof" \
            --run-command "sync"
          if [ $? -ne 0 ]; then
              echo "Failed to install additional packages, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          
          echo "Final system configuration..."
          virt-customize -a archlinux-expanded.qcow2 \
            --append-line "/etc/systemd/timesyncd.conf:NTP=time.apple.com time.windows.com" \
            --run-command "sync"
          if [ $? -ne 0 ]; then
              echo "Failed to customize Arch Linux image, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2
              exit 1
          fi
          echo "Configuring SSH and root access for Arch Linux..."
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "sed -i 's/ssh_pwauth:[[:space:]]*0/ssh_pwauth: 1/g' /etc/cloud/cloud.cfg"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "systemctl enable sshd"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "sed -i 's/#PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "sed -i 's/#Port 22/Port 22/g' /etc/ssh/sshd_config"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "sed -i 's/#AddressFamily any/AddressFamily any/g' /etc/ssh/sshd_config"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "sed -i 's/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/g' /etc/ssh/sshd_config"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "sed -i 's/#ListenAddress ::/ListenAddress ::/g' /etc/ssh/sshd_config"
          echo "Configuring qemu-guest-agent for Arch Linux..."
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "systemctl enable qemu-guest-agent"
          echo "Setting root password and MOTD for Arch Linux..."
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "echo root:oneclickvirt | chpasswd root"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "echo '' > /etc/motd"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "echo 'Modified from https://github.com/oneclickvirt/pve_kvm_images' >> /etc/motd"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "echo 'Related repo https://github.com/spiritLHLS/pve' >> /etc/motd"
          sudo virt-customize -v -x -a archlinux-expanded.qcow2 --run-command "echo '--by https://t.me/spiritlhl' >> /etc/motd"
          echo "Compressing Arch Linux image"
          virt-sparsify --compress archlinux-expanded.qcow2 archlinux-custom.qcow2
          if [ $? -ne 0 ]; then
              echo "Failed to compress Arch Linux image, exiting..."
              rm -f archlinux.qcow2 archlinux-expanded.qcow2 archlinux-custom.qcow2
              exit 1
          fi
          mv archlinux-custom.qcow2 archlinux-latest.qcow2
          ls -lh archlinux-latest.qcow2
          file="archlinux-latest.qcow2"
          if [ -f "$file" ] && [ $(stat -c %s "$file") -gt 10485760 ] && [ $(stat -c %s "$file") -le 2147483648 ]; then
              echo "Processing file: $file"
              release_id=$(curl -s -m 6 -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/tags/archlinux" | jq -r '.id')
              if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
                  echo "Release 'archlinux' not found, please create it first"
                  rm -f archlinux.qcow2 archlinux-expanded.qcow2 archlinux-latest.qcow2
                  exit 1
              fi
              echo "Found release ID: $release_id"
              echo "Checking if $file already exists in release..."
              existing_asset_id=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | jq -r --arg name "$(basename "$file")" '.[] | select(.name == $name) | .id')
              if [ -n "$existing_asset_id" ] && [ "$existing_asset_id" != "null" ]; then
                  echo "Asset $file already exists in release, deleting existing asset..."
                  delete_response=$(curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$existing_asset_id")
                  echo "$delete_response"
                  if [ $? -eq 0 ] && ! echo "$delete_response" | grep -q "error"; then
                      echo "Existing asset deleted successfully."
                  else
                      echo "Failed to delete existing asset for $file. Skipping file upload..."
                      rm -f archlinux.qcow2 archlinux-expanded.qcow2 archlinux-latest.qcow2
                      exit 1
                  fi
              else
                  echo "No existing $file file found in release."
              fi
              echo "Uploading $file to release..."
              upload_response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                -T "$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$file")")
              echo "Upload response: $upload_response"
              if echo "$upload_response" | jq -e '.browser_download_url' > /dev/null 2>&1; then
                  echo "Successfully uploaded $file"
                  download_url=$(echo "$upload_response" | jq -r '.browser_download_url')
                  echo "Download URL: $download_url"
              else
                  echo "Failed to upload $file"
                  echo "Response: $upload_response"
              fi
          else
              echo "File $file does not exist, is too small (< 10MB), or is too large (> 2GB)"
              if [ -f "$file" ]; then
                  file_size=$(stat -c %s "$file")
                  echo "File size: $file_size bytes"
              fi
          fi
          echo "Cleaning up files for Arch Linux"
          rm -f archlinux.qcow2 archlinux-expanded.qcow2 archlinux-latest.qcow2
          echo "=== Completed processing Arch Linux ==="
