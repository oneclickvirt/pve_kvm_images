name: Build Kali Cloud Images
on:
  schedule:
    - cron: "34 18 * * *"
  workflow_dispatch:

jobs:
  build_kali_cloud_images:
    runs-on: pve-1
    steps:
      - uses: actions/checkout@v2

      - name: Environment preparation
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget unzip zip jq p7zip-full
          sudo apt-get install -y libguestfs-tools rng-tools qemu-utils
          sudo apt-get install -y libguestfs-tools rng-tools qemu-utils --fix-missing

      - name: Build Kali Images
        run: |
          declare -A kali_versions
          kali_versions["current"]="2025.2"
          
          for version_key in "current"; do
              version="${kali_versions[$version_key]}"
              echo "=== Processing Kali $version ==="
              rm -f kali-*.qcow2 kali-*-custom.qcow2 kali${version_key}.qcow2 *.7z
              
              # 方法1: 下载官方 VMware 镜像并转换
              echo "Trying to download official VMware image..."
              vmware_url="https://cdimage.kali.org/kali-${version}/kali-linux-${version}-vmware-amd64.7z"
              
              axel -n 4 -o kali-linux-${version}-vmware-amd64.7z "$vmware_url" || \
              curl -L -o kali-linux-${version}-vmware-amd64.7z "$vmware_url"
              
              if [ -f "kali-linux-${version}-vmware-amd64.7z" ] && [ $(stat -c%s "kali-linux-${version}-vmware-amd64.7z") -gt 104857600 ]; then
                  echo "Extracting VMware image..."
                  7z x kali-linux-${version}-vmware-amd64.7z
                  
                  # 列出解压后的内容进行调试
                  echo "Contents after extraction:"
                  find . -name "*.vmdk" -o -name "*.vmwarevm" | head -10
                  
                  # 查找 vmwarevm 目录
                  vmware_dir=$(find . -name "*.vmwarevm" -type d | head -1)
                  if [ -n "$vmware_dir" ]; then
                      echo "Found VMware directory: $vmware_dir"
                      ls -la "$vmware_dir"
                      
                      # 查找主 VMDK 文件（通常不带 s001, s002 等后缀）
                      main_vmdk=$(find "$vmware_dir" -name "*.vmdk" | grep -v -- "-s[0-9]" | head -1)
                      
                      if [ -z "$main_vmdk" ]; then
                          # 如果没有主文件，查找第一个分片文件
                          main_vmdk=$(find "$vmware_dir" -name "*-s001.vmdk" | head -1)
                          if [ -z "$main_vmdk" ]; then
                              # 最后尝试任意 VMDK 文件
                              main_vmdk=$(find "$vmware_dir" -name "*.vmdk" | head -1)
                          fi
                      fi
                      
                      if [ -n "$main_vmdk" ]; then
                          echo "Using VMDK file: $main_vmdk"
                          
                          # 检查是否是分片文件
                          if ls "$vmware_dir"/*-s[0-9]*.vmdk 1> /dev/null 2>&1; then
                              echo "Detected split VMDK files, attempting conversion directly..."
                              # 对于分片 VMDK，qemu-img 通常能自动处理，只需指向主文件
                              base_name=$(basename "$main_vmdk" | sed 's/-s[0-9]*.vmdk$//')
                              descriptor_file="$vmware_dir/$base_name.vmdk"
                              
                              if [ -f "$descriptor_file" ]; then
                                  echo "Using descriptor file: $descriptor_file"
                                  qemu-img convert -f vmdk -O qcow2 "$descriptor_file" kali-${version}.qcow2
                              else
                                  echo "No descriptor file found, trying main VMDK..."
                                  qemu-img convert -f vmdk -O qcow2 "$main_vmdk" kali-${version}.qcow2
                              fi
                          else
                              echo "Single VMDK file detected"
                              qemu-img convert -f vmdk -O qcow2 "$main_vmdk" kali-${version}.qcow2
                          fi
                          
                          if [ -f "kali-${version}.qcow2" ]; then
                              echo "Successfully converted VMware image to qcow2"
                              echo "Output file size: $(ls -lh kali-${version}.qcow2)"
                              # 清理解压的文件
                              rm -rf */
                              rm -f kali-linux-${version}-vmware-amd64.7z
                          else
                              echo "VMDK conversion failed"
                          fi
                      else
                          echo "No VMDK files found in $vmware_dir"
                          ls -la "$vmware_dir"
                      fi
                  else
                      echo "No .vmwarevm directory found, looking for loose VMDK files..."
                      vmdk_file=$(find . -name "*.vmdk" | grep -v -- "-s[0-9]" | head -1)
                      if [ -z "$vmdk_file" ]; then
                          vmdk_file=$(find . -name "*.vmdk" | head -1)
                      fi
                      
                      if [ -n "$vmdk_file" ]; then
                          echo "Converting VMDK to qcow2: $vmdk_file"
                          qemu-img convert -f vmdk -O qcow2 "$vmdk_file" kali-${version}.qcow2
                          
                          if [ -f "kali-${version}.qcow2" ]; then
                              echo "Successfully converted VMware image to qcow2"
                              # 清理解压的文件
                              rm -rf */
                              rm -f kali-linux-${version}-vmware-amd64.7z
                          fi
                      else
                          echo "No VMDK files found after extraction"
                      fi
                  fi
              fi
              
              # 方法2: 如果上面失败，尝试第三方源（谨慎使用）
              if [ ! -f "kali-${version}.qcow2" ]; then
                  echo "VMware conversion failed, trying alternative sources..."
                  
                  # TuxFixer 提供的 qcow2（非官方，仅作备选）
                  alt_url="https://tuxfixer.com/download/kali-linux-${version}-amd64.qcow2"
                  echo "Trying alternative source: $alt_url"
                  
                  curl -L -o kali-${version}.qcow2 "$alt_url" 2>/dev/null || \
                  axel -n 4 -o kali-${version}.qcow2 "$alt_url" 2>/dev/null || true
                  
                  # 验证下载的文件
                  if [ -f "kali-${version}.qcow2" ] && [ $(stat -c %s "kali-${version}.qcow2") -lt 52428800 ]; then
                      echo "Downloaded file too small, probably not a valid image"
                      rm -f kali-${version}.qcow2
                  fi
              fi
              
              # 方法3: 使用 virt-builder 作为最后备选
              if [ ! -f "kali-${version}.qcow2" ]; then
                  echo "All download methods failed, creating from base system..."
                  virt-builder debian-11 \
                    --output kali-${version}.qcow2 \
                    --format qcow2 \
                    --size 20G \
                    --root-password password:oneclickvirt \
                    --hostname kali \
                    --timezone Asia/Hong_Kong
                  
                  if [ $? -ne 0 ]; then
                      echo "Failed to create base system for Kali $version, skipping..."
                      continue
                  fi
                  
                  # 转换为 Kali
                  virt-customize -a kali-${version}.qcow2 \
                    --run-command "echo 'deb http://http.kali.org/kali kali-rolling main non-free contrib' > /etc/apt/sources.list" \
                    --run-command "wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add -" \
                    --run-command "apt-get update || true" \
                    --install "kali-linux-core" || true
              fi
              
              # 验证镜像是否可用
              if [ ! -f "kali-${version}.qcow2" ]; then
                  echo "Failed to obtain Kali image, skipping..."
                  continue
              fi
              
              # 检查镜像是否包含操作系统
              if ! virt-filesystems -a kali-${version}.qcow2 >/dev/null 2>&1; then
                  echo "Image does not contain a valid filesystem, skipping..."
                  rm -f kali-${version}.qcow2
                  continue
              fi
              
              chmod 644 kali-${version}.qcow2
              echo "Customizing Kali $version image"
              
              # 自定义镜像
              virt-customize -a kali-${version}.qcow2 \
                --timezone Asia/Hong_Kong \
                --run-command "systemctl enable serial-getty@ttyS1.service || true" \
                --update || true \
                --install "sudo,qemu-guest-agent,spice-vdagent,bash-completion,unzip,wget,curl,axel,net-tools,iputils-ping,nano,vim,htop" || true \
                --run-command "apt-get -y autoremove --purge && apt-get -y clean" \
                --run-command "sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config" \
                --run-command "sed -i 's/#PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config" \
                --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config" \
                --run-command "systemctl enable ssh || systemctl enable sshd || true" \
                --run-command "systemctl enable qemu-guest-agent || true" \
                --run-command "echo root:oneclickvirt | chpasswd" \
                --run-command "echo 'Modified from https://github.com/oneclickvirt/pve_kvm_images' > /etc/motd" \
                --run-command "echo 'Related repo https://github.com/spiritLHLS/pve' >> /etc/motd" \
                --run-command "echo '--by https://t.me/spiritlhl' >> /etc/motd" \
                --delete "/var/log/*.log" || true \
                --delete "/var/lib/apt/lists/*" || true \
                --delete "/var/cache/apt/*" || true \
                --truncate "/etc/machine-id" || true
              
              if [ $? -ne 0 ]; then
                  echo "Some customization steps failed, but continuing..."
              fi
              
              echo "Compressing Kali $version image"
              virt-sparsify --compress kali-${version}.qcow2 kali-${version}-custom.qcow2 || \
              cp kali-${version}.qcow2 kali-${version}-custom.qcow2
              
              mv kali-${version}-custom.qcow2 kali${version_key}.qcow2
              ls -lh kali${version_key}.qcow2
              
              # 上传逻辑保持不变...
              file="kali${version_key}.qcow2"
              if [ -f "$file" ] && [ $(stat -c %s "$file") -gt 10485760 ] && [ $(stat -c %s "$file") -le 2147483648 ]; then
                  echo "Processing file: $file"
                  release_id=$(curl -s -m 6 -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/tags/kali" | jq -r '.id')
                  if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
                      echo "Release 'kali' not found, please create it first"
                      rm -f kali-${version}.qcow2 kali${version_key}.qcow2
                      continue
                  fi
                  
                  # 上传逻辑...（保持原有逻辑）
                  echo "Found release ID: $release_id"
                  existing_asset_id=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | jq -r --arg name "$(basename "$file")" '.[] | select(.name == $name) | .id')
                  
                  if [ -n "$existing_asset_id" ] && [ "$existing_asset_id" != "null" ]; then
                      echo "Asset $file already exists, deleting..."
                      curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$existing_asset_id"
                  fi
                  
                  echo "Uploading $file to release..."
                  upload_response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/octet-stream" \
                    -T "$file" \
                    "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$file")")
                  
                  if echo "$upload_response" | jq -e '.browser_download_url' > /dev/null 2>&1; then
                      echo "Successfully uploaded $file"
                      download_url=$(echo "$upload_response" | jq -r '.browser_download_url')
                      echo "Download URL: $download_url"
                  else
                      echo "Failed to upload $file"
                  fi
              fi
              
              echo "Cleaning up files for Kali $version"
              rm -f kali-${version}.qcow2 kali${version_key}.qcow2
              echo "=== Completed processing Kali $version ==="
          done
          echo "All Kali versions processed!"
