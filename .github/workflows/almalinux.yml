name: Build Almalinux Cloud Images
on:
  schedule:
    - cron: "34 13 * * *"
  workflow_dispatch:

jobs:
  build_almalinux_cloud_images:
    runs-on: pve-1
    steps:
      - uses: actions/checkout@v2

      - name: check path
        run: |
          pwd

      - name: Configure Git
        run: |
          git config --global user.name "daily-update"
          git config --global user.email "tg@spiritlhl.top"

      - name: Environment preparation
        run: |
          export LIBGUESTFS_DEBUG=1
          export LIBGUESTFS_TRACE=1
          export LIBGUESTFS_BACKEND=direct
          export LIBGUESTFS_BACKEND_SETTINGS="passt:no"
          sudo apt-get update
          sudo apt-get install -y curl wget unzip zip jq
          sudo apt-get install -y libguestfs-tools rng-tools curl axel
          sudo apt-get install -y libguestfs-tools rng-tools curl axel --fix-missing

      - name: Build Almalinux Images
        run: |
          # 定义版本信息 (从新到旧)
          declare -A almalinux_versions
          almalinux_versions["10"]="10"
          almalinux_versions["9"]="9"
          almalinux_versions["8"]="8"
          # 按版本顺序处理 (从新到旧)
          for version in "9" "8"; do
              echo "=== Processing Almalinux $version ==="
              # 清理之前的文件
              rm -f almalinux-${version}.qcow2 almalinux-${version}-custom.qcow2 almalinux${version}.qcow2
              # 下载镜像
              echo "Downloading Almalinux $version Cloud Image"
              download_url="https://repo.almalinux.org/almalinux/${version}/cloud/x86_64/images/AlmaLinux-${version}-GenericCloud-latest.x86_64.qcow2"
              axel -n 8 -o almalinux-${version}.qcow2 "$download_url"
              if [ $? -ne 0 ]; then
                  echo "Axel failed, trying with curl"
                  curl -o almalinux-${version}.qcow2 "$download_url"
                  if [ $? -ne 0 ]; then
                      echo "Failed to download Almalinux $version, skipping..."
                      continue
                  fi
              fi
              if [ ! -f "almalinux-${version}.qcow2" ] || [ $(stat -c %s "almalinux-${version}.qcow2") -lt 10485760 ]; then
                  echo "Download failed or file too small for Almalinux $version, skipping..."
                  rm -f almalinux-${version}.qcow2
                  continue
              fi
              chmod 644 almalinux-${version}.qcow2
              # 自定义镜像
              echo "Customizing Almalinux $version image"
              virt-customize -a almalinux-${version}.qcow2 \
                --smp 2 \
                --timezone Asia/Hong_Kong \
                --append-line "/etc/default/grub:# disables OS prober to avoid loopback detection which breaks booting" \
                --append-line "/etc/default/grub:GRUB_DISABLE_OS_PROBER=true" \
                --run-command "grub2-mkconfig -o /boot/grub2/grub.cfg" \
                --run-command "systemctl enable serial-getty@ttyS1.service" \
                --update \
                --install "sudo,qemu-guest-agent,spice-vdagent,bash-completion,unzip,wget,curl,net-tools,iputils,nano,screen,less,vim,bzip2,lldpad,mtr,htop,bind-utils,zstd,cronie,lsof" \
                --run-command "dnf -y autoremove && dnf -y clean all" \
                --append-line "/etc/systemd/timesyncd.conf:NTP=time.apple.com time.windows.com" \
                --delete "/var/log/*.log" \
                --delete "/var/cache/dnf/*" \
                --truncate "/etc/machine-id"
              if [ $? -ne 0 ]; then
                  echo "Failed to customize Almalinux $version image, skipping..."
                  rm -f almalinux-${version}.qcow2
                  continue
              fi
              echo "Configuring SSH and root access for Almalinux $version..."
              # SSH配置 - 启用密码认证和root登录
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "sed -i 's/ssh_pwauth:[[:space:]]*false/ssh_pwauth: true/g' /etc/cloud/cloud.cfg"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "systemctl enable sshd"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "sed -i 's/#PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "sed -i 's/#Port 22/Port 22/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "sed -i 's/#AddressFamily any/AddressFamily any/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "sed -i 's/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "sed -i 's/#ListenAddress ::/ListenAddress ::/g' /etc/ssh/sshd_config"
              echo "Configuring qemu-guest-agent for Almalinux $version..."
              # qemu-guest-agent配置
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "systemctl start qemu-guest-agent"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "systemctl enable qemu-guest-agent"
              echo "Setting root password and MOTD for Almalinux $version..."
              # 设置root密码
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "echo root:oneclickvirt | chpasswd root"
              # 设置MOTD
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "echo '' > /etc/motd"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "echo 'Modified from https://github.com/oneclickvirt/pve_kvm_images' >> /etc/motd"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "echo 'Related repo https://github.com/spiritLHLS/pve' >> /etc/motd"
              sudo virt-customize -v -x -a almalinux-${version}.qcow2 --run-command "echo '--by https://t.me/spiritlhl' >> /etc/motd"
              # 压缩镜像
              echo "Compressing Almalinux $version image"
              virt-sparsify --compress almalinux-${version}.qcow2 almalinux-${version}-custom.qcow2
              if [ $? -ne 0 ]; then
                  echo "Failed to compress Almalinux $version image, skipping..."
                  rm -f almalinux-${version}.qcow2 almalinux-${version}-custom.qcow2
                  continue
              fi
              mv almalinux-${version}-custom.qcow2 almalinux${version}.qcow2
              ls -lh almalinux${version}.qcow2
              # 上传镜像
              file="almalinux${version}.qcow2"
              if [ -f "$file" ] && [ $(stat -c %s "$file") -gt 10485760 ] && [ $(stat -c %s "$file") -le 2147483648 ]; then
                  echo "Processing file: $file"
                  release_id=$(curl -s -m 6 -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/tags/almalinux" | jq -r '.id')
                  if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
                      echo "Release 'almalinux' not found, please create it first"
                      rm -f almalinux-${version}.qcow2 almalinux${version}.qcow2
                      continue
                  fi
                  echo "Found release ID: $release_id"
                  echo "Checking if $file already exists in release..."
                  existing_asset_id=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | jq -r --arg name "$(basename "$file")" '.[] | select(.name == $name) | .id')
                  if [ -n "$existing_asset_id" ] && [ "$existing_asset_id" != "null" ]; then
                      echo "Asset $file already exists in release, deleting existing asset..."
                      delete_response=$(curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$existing_asset_id")
                      echo "$delete_response"
                      if [ $? -eq 0 ] && ! echo "$delete_response" | grep -q "error"; then
                          echo "Existing asset deleted successfully."
                      else
                          echo "Failed to delete existing asset for $file. Skipping file upload..."
                          rm -f almalinux-${version}.qcow2 almalinux${version}.qcow2
                          continue
                      fi
                  else
                      echo "No existing $file file found in release."
                  fi
                  echo "Uploading $file to release..."
                  upload_response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/octet-stream" \
                    -T "$file" \
                    "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$file")")
                  echo "Upload response: $upload_response"
                  if echo "$upload_response" | jq -e '.browser_download_url' > /dev/null 2>&1; then
                      echo "Successfully uploaded $file"
                      download_url=$(echo "$upload_response" | jq -r '.browser_download_url')
                      echo "Download URL: $download_url"
                  else
                      echo "Failed to upload $file"
                      echo "Response: $upload_response"
                  fi
              else
                  echo "File $file does not exist, is too small (< 10MB), or is too large (> 2GB)"
                  if [ -f "$file" ]; then
                      file_size=$(stat -c %s "$file")
                      echo "File size: $file_size bytes"
                  fi
              fi
              # 清理当前版本的文件
              echo "Cleaning up files for Almalinux $version"
              rm -f almalinux-${version}.qcow2 almalinux${version}.qcow2
              echo "=== Completed processing Almalinux $version ==="
              echo ""
          done
          echo "All Almalinux versions processed!"
