name: Build Kali Cloud Images
on:
  schedule:
    - cron: "34 18 * * *"
  workflow_dispatch:

jobs:
  build_kali_cloud_images:
    runs-on: pve-1
    steps:
      - uses: actions/checkout@v2

      - name: check path
        run: |
          pwd

      - name: Configure Git
        run: |
          git config --global user.name "daily-update"
          git config --global user.email "tg@spiritlhl.top"

      - name: Environment preparation
        run: |
          export LIBGUESTFS_DEBUG=1
          export LIBGUESTFS_TRACE=1
          export LIBGUESTFS_BACKEND=direct
          export LIBGUESTFS_BACKEND_SETTINGS="passt:no"
          sudo apt-get update
          sudo apt-get install -y curl wget unzip zip jq
          sudo apt-get install -y libguestfs-tools rng-tools curl axel virtinst
          sudo apt-get install -y libguestfs-tools rng-tools curl axel virtinst --fix-missing

      - name: Build Kali Images
        run: |
          declare -A kali_versions
          kali_versions["current"]="current"
          for version in "current"; do
              echo "=== Processing Kali $version ==="
              rm -f kali-${version}.iso kali-${version}.qcow2 kali-${version}-custom.qcow2 kali${version}.qcow2
              echo "Downloading Kali $version Live ISO"
              if [ "$version" = "current" ]; then
                  download_url="https://cdimage.kali.org/current/kali-linux-2025.2-live-amd64.iso"
                  version_name="current"
              else
                  download_url="https://cdimage.kali.org/kali-${version}/kali-linux-${version}-live-amd64.iso"
                  version_name="$version"
              fi
              echo "Downloading from: $download_url"
              axel -n 8 -o kali-${version}.iso "$download_url"
              if [ $? -ne 0 ]; then
                  echo "Axel failed, trying with curl"
                  curl -o kali-${version}.iso "$download_url"
                  if [ $? -ne 0 ]; then
                      echo "Failed to download Kali $version, skipping..."
                      continue
                  fi
              fi
              if [ ! -f "kali-${version}.iso" ] || [ $(stat -c %s "kali-${version}.iso") -lt 1073741824 ]; then
                  echo "Download failed or file too small for Kali $version, skipping..."
                  rm -f kali-${version}.iso
                  continue
              fi
              echo "Converting ISO to qcow2 for Kali $version"
              qemu-img create -f qcow2 kali-${version}.qcow2 20G
              if [ $? -ne 0 ]; then
                  echo "Failed to create qcow2 image for Kali $version, skipping..."
                  rm -f kali-${version}.iso
                  continue
              fi
              echo "Installing Kali $version from ISO to qcow2 using virt-install"
              sudo virt-install \
                --name kali-temp-${version} \
                --ram 2048 \
                --vcpus 2 \
                --disk path=kali-${version}.qcow2,format=qcow2 \
                --cdrom kali-${version}.iso \
                --os-type linux \
                --os-variant debian11 \
                --network network=default \
                --graphics none \
                --console pty,target_type=serial \
                --location kali-${version}.iso \
                --extra-args "console=ttyS0,115200n8 serial auto=true priority=critical preseed/file=/cdrom/install/preseed.cfg" \
                --initrd-inject=/dev/null \
                --noreboot \
                --wait=-1 || true
              if [ $? -ne 0 ]; then
                  echo "Automated installation failed, creating base system manually"
                  rm -f kali-${version}.qcow2
                  virt-builder debian-11 \
                    --output kali-${version}.qcow2 \
                    --format qcow2 \
                    --size 20G \
                    --root-password password:oneclickvirt \
                    --hostname kali \
                    --timezone Asia/Hong_Kong
                  if [ $? -ne 0 ]; then
                      echo "Failed to create base system for Kali $version, skipping..."
                      rm -f kali-${version}.iso kali-${version}.qcow2
                      continue
                  fi
                  echo "Converting Debian base to Kali Linux"
                  virt-customize -a kali-${version}.qcow2 \
                    --run-command "echo 'deb http://http.kali.org/kali kali-rolling main non-free contrib' > /etc/apt/sources.list" \
                    --run-command "echo 'deb-src http://http.kali.org/kali kali-rolling main non-free contrib' >> /etc/apt/sources.list" \
                    --run-command "wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add" \
                    --run-command "apt-get update" \
                    --install "kali-linux-core,kali-desktop-xfce" \
                    --run-command "apt-get -y dist-upgrade"
              fi
              chmod 644 kali-${version}.qcow2
              echo "Customizing Kali $version image"
              virt-customize -a kali-${version}.qcow2 \
                --smp 2 \
                --timezone Asia/Hong_Kong \
                --append-line "/etc/default/grub:# disables OS prober to avoid loopback detection which breaks booting" \
                --append-line "/etc/default/grub:GRUB_DISABLE_OS_PROBER=true" \
                --run-command "update-grub" \
                --run-command "systemctl enable serial-getty@ttyS1.service" \
                --update \
                --install "sudo,qemu-guest-agent,spice-vdagent,bash-completion,unzip,wget,curl,axel,net-tools,iputils-ping,nano,most,screen,less,vim,bzip2,htop,dnsutils,zstd,cron,lsof" \
                --run-command "apt-get -y autoremove --purge && apt-get -y clean" \
                --append-line "/etc/systemd/timesyncd.conf:NTP=time.apple.com time.windows.com" \
                --delete "/var/log/*.log" \
                --delete "/var/lib/apt/lists/*" \
                --delete "/var/cache/apt/*" \
                --truncate "/etc/machine-id"
              if [ $? -ne 0 ]; then
                  echo "Failed to customize Kali $version image, skipping..."
                  rm -f kali-${version}.qcow2
                  continue
              fi
              echo "Configuring SSH and root access for Kali $version..."
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "sed -i 's/ssh_pwauth:[[:space:]]*0/ssh_pwauth: 1/g' /etc/cloud/cloud.cfg"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "systemctl enable ssh"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "sed -i 's/#PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "sed -i 's/#Port 22/Port 22/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "sed -i 's/#AddressFamily any/AddressFamily any/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "sed -i 's/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/g' /etc/ssh/sshd_config"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "sed -i 's/#ListenAddress ::/ListenAddress ::/g' /etc/ssh/sshd_config"
              echo "Configuring qemu-guest-agent for Kali $version..."
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "systemctl start qemu-guest-agent"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "systemctl enable qemu-guest-agent"
              echo "Setting root password and MOTD for Kali $version..."
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "echo root:oneclickvirt | chpasswd root"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "echo '' > /etc/motd"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "echo 'Modified from https://github.com/oneclickvirt/pve_kvm_images' >> /etc/motd"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "echo 'Related repo https://github.com/spiritLHLS/pve' >> /etc/motd"
              sudo virt-customize -v -x -a kali-${version}.qcow2 --run-command "echo '--by https://t.me/spiritlhl' >> /etc/motd"
              echo "Compressing Kali $version image"
              virt-sparsify --compress kali-${version}.qcow2 kali-${version}-custom.qcow2
              if [ $? -ne 0 ]; then
                  echo "Failed to compress Kali $version image, skipping..."
                  rm -f kali-${version}.qcow2 kali-${version}-custom.qcow2
                  continue
              fi
              mv kali-${version}-custom.qcow2 kali${version}.qcow2
              ls -lh kali${version}.qcow2
              file="kali${version}.qcow2"
              if [ -f "$file" ] && [ $(stat -c %s "$file") -gt 10485760 ] && [ $(stat -c %s "$file") -le 2147483648 ]; then
                  echo "Processing file: $file"
                  release_id=$(curl -s -m 6 -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/tags/kali" | jq -r '.id')
                  if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
                      echo "Release 'kali' not found, please create it first"
                      rm -f kali-${version}.iso kali-${version}.qcow2 kali${version}.qcow2
                      continue
                  fi
                  echo "Found release ID: $release_id"
                  echo "Checking if $file already exists in release..."
                  existing_asset_id=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | jq -r --arg name "$(basename "$file")" '.[] | select(.name == $name) | .id')
                  if [ -n "$existing_asset_id" ] && [ "$existing_asset_id" != "null" ]; then
                      echo "Asset $file already exists in release, deleting existing asset..."
                      delete_response=$(curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$existing_asset_id")
                      echo "$delete_response"
                      if [ $? -eq 0 ] && ! echo "$delete_response" | grep -q "error"; then
                          echo "Existing asset deleted successfully."
                      else
                          echo "Failed to delete existing asset for $file. Skipping file upload..."
                          rm -f kali-${version}.iso kali-${version}.qcow2 kali${version}.qcow2
                          continue
                      fi
                  else
                      echo "No existing $file file found in release."
                  fi
                  echo "Uploading $file to release..."
                  upload_response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/octet-stream" \
                    -T "$file" \
                    "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$file")")
                  echo "Upload response: $upload_response"
                  if echo "$upload_response" | jq -e '.browser_download_url' > /dev/null 2>&1; then
                      echo "Successfully uploaded $file"
                      download_url=$(echo "$upload_response" | jq -r '.browser_download_url')
                      echo "Download URL: $download_url"
                  else
                      echo "Failed to upload $file"
                      echo "Response: $upload_response"
                  fi
              else
                  echo "File $file does not exist, is too small (< 10MB), or is too large (> 2GB)"
                  if [ -f "$file" ]; then
                      file_size=$(stat -c %s "$file")
                      echo "File size: $file_size bytes"
                  fi
              fi
              echo "Cleaning up files for Kali $version"
              rm -f kali-${version}.iso kali-${version}.qcow2 kali${version}.qcow2
              sudo virsh destroy kali-temp-${version} 2>/dev/null || true
              sudo virsh undefine kali-temp-${version} 2>/dev/null || true
              echo "=== Completed processing Kali $version ==="
              echo ""
          done
          echo "All Kali versions processed!"
