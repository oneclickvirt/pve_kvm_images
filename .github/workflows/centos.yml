name: Build CentOS Cloud Images
on:
    schedule:
        - cron: "34 17 * * *"
    workflow_dispatch:

jobs:
    build_centos_cloud_images:
        runs-on: pve-1
        steps:
            - uses: actions/checkout@v2

            - name: check path
              run: |
                  pwd

            - name: Configure Git
              run: |
                  git config --global user.name "daily-update"
                  git config --global user.email "tg@spiritlhl.top"

            - name: Environment preparation
              run: |
                  export LIBGUESTFS_DEBUG=1
                  export LIBGUESTFS_TRACE=1
                  export LIBGUESTFS_BACKEND=direct
                  export LIBGUESTFS_BACKEND_SETTINGS="passt:no"
                  sudo apt-get update
                  sudo apt-get install -y curl wget unzip zip jq
                  sudo apt-get install -y libguestfs-tools rng-tools curl axel
                  sudo apt-get install -y libguestfs-tools rng-tools curl axel --fix-missing

            - name: Build CentOS Images
              run: |
                  declare -A centos_versions
                  centos_versions["9"]="9"
                  centos_versions["8"]="8"
                  centos_versions["7"]="7"
                  for version in "9" "8" "7"; do
                      echo "=== Processing CentOS $version ==="
                      rm -f centos-${version}.qcow2 centos-${version}-custom.qcow2 centos${version}.qcow2
                      echo "Downloading CentOS $version Cloud Image"
                      if [ "$version" = "9" ]; then
                          download_url="https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2"
                      elif [ "$version" = "8" ]; then
                          download_url="https://cloud.centos.org/centos/8-stream/x86_64/images/CentOS-Stream-GenericCloud-8-latest.x86_64.qcow2"
                      elif [ "$version" = "7" ]; then
                          download_url="https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2"
                      fi
                      axel -n 8 -o centos-${version}.qcow2 "$download_url"
                      if [ $? -ne 0 ]; then
                          echo "Axel failed, trying with curl"
                          curl -o centos-${version}.qcow2 "$download_url"
                          if [ $? -ne 0 ]; then
                              echo "Failed to download CentOS $version, skipping..."
                              continue
                          fi
                      fi
                      if [ ! -f "centos-${version}.qcow2" ] || [ $(stat -c %s "centos-${version}.qcow2") -lt 10485760 ]; then
                          echo "Download failed or file too small for CentOS $version, skipping..."
                          rm -f centos-${version}.qcow2
                          continue
                      fi
                      chmod 644 centos-${version}.qcow2
                      echo "Customizing CentOS $version image"
                      if [ "$version" = "7" ]; then
                          package_manager="yum"
                          grub_config_path="/boot/grub2/grub.cfg"
                      else
                          package_manager="dnf"
                          grub_config_path="/boot/grub2/grub.cfg"
                      fi
                      if [ "$version" != "9" ]; then
                        virt-customize -a centos-${version}.qcow2 \
                            --run-command "curl -Lk https://gitee.com/SuperManito/LinuxMirrors/raw/main/ChangeMirrors.sh -o /root/ChangeMirrors.sh"
                        virt-customize -a centos-${version}.qcow2 \
                            --run-command "chmod +x /root/ChangeMirrors.sh && bash /root/ChangeMirrors.sh --source mirrors.tuna.tsinghua.edu.cn --web-protocol http --intranet false --backup true --updata-software false --clean-cache false --ignore-backup-tips"
                      fi
                      virt-customize -a centos-${version}.qcow2 \
                        --smp 2 \
                        --timezone Asia/Hong_Kong \
                        --append-line "/etc/default/grub:# disables OS prober to avoid loopback detection which breaks booting" \
                        --append-line "/etc/default/grub:GRUB_DISABLE_OS_PROBER=true" \
                        --run-command "grub2-mkconfig -o $grub_config_path" \
                        --run-command "systemctl enable serial-getty@ttyS1.service" \
                        --update \
                        --run-command "$package_manager install -y epel-release" \
                        --install "sudo,qemu-guest-agent,spice-vdagent,bash-completion,unzip,wget,curl,net-tools,iputils,nano,screen,less,vim,bzip2,lldpad,mtr,htop,bind-utils,zstd,cronie,lsof" \
                        --run-command "$package_manager -y autoremove && $package_manager -y clean all" \
                        --append-line "/etc/systemd/timesyncd.conf:NTP=time.apple.com time.windows.com" \
                        --delete "/var/log/*.log" \
                        --delete "/var/cache/yum/*" \
                        --delete "/var/cache/dnf/*" \
                        --truncate "/etc/machine-id"
                      if [ $? -ne 0 ]; then
                          echo "Failed to customize CentOS $version image, skipping..."
                          rm -f centos-${version}.qcow2
                          continue
                      fi
                      echo "Configuring SSH and root access for CentOS $version..."
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "sed -i 's/ssh_pwauth:[[:space:]]*false/ssh_pwauth: true/g' /etc/cloud/cloud.cfg"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "systemctl enable sshd"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "sed -i 's/#PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "sed -i 's/#Port 22/Port 22/g' /etc/ssh/sshd_config"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "sed -i 's/#AddressFamily any/AddressFamily any/g' /etc/ssh/sshd_config"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "sed -i 's/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/g' /etc/ssh/sshd_config"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "sed -i 's/#ListenAddress ::/ListenAddress ::/g' /etc/ssh/sshd_config"
                      echo "Configuring qemu-guest-agent for CentOS $version..."
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "systemctl start qemu-guest-agent"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "systemctl enable qemu-guest-agent"
                      echo "Setting root password and MOTD for CentOS $version..."
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "echo root:oneclickvirt | chpasswd root"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "echo '' > /etc/motd"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "echo 'Modified from https://github.com/oneclickvirt/pve_kvm_images' >> /etc/motd"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "echo 'Related repo https://github.com/spiritLHLS/pve' >> /etc/motd"
                      sudo virt-customize -v -x -a centos-${version}.qcow2 --run-command "echo '--by https://t.me/spiritlhl' >> /etc/motd"
                      echo "Compressing CentOS $version image"
                      virt-sparsify --compress centos-${version}.qcow2 centos-${version}-custom.qcow2
                      if [ $? -ne 0 ]; then
                          echo "Failed to compress CentOS $version image, skipping..."
                          rm -f centos-${version}.qcow2 centos-${version}-custom.qcow2
                          continue
                      fi
                      mv centos-${version}-custom.qcow2 centos${version}.qcow2
                      ls -lh centos${version}.qcow2
                      file="centos${version}.qcow2"
                      if [ -f "$file" ] && [ $(stat -c %s "$file") -gt 10485760 ] && [ $(stat -c %s "$file") -le 2147483648 ]; then
                          echo "Processing file: $file"
                          release_id=$(curl -s -m 6 -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/tags/centos" | jq -r '.id')
                          if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
                              echo "Release 'centos' not found, please create it first"
                              rm -f centos-${version}.qcow2 centos${version}.qcow2
                              continue
                          fi
                          echo "Found release ID: $release_id"
                          echo "Checking if $file already exists in release..."
                          existing_asset_id=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | jq -r --arg name "$(basename "$file")" '.[] | select(.name == $name) | .id')
                          if [ -n "$existing_asset_id" ] && [ "$existing_asset_id" != "null" ]; then
                              echo "Asset $file already exists in release, deleting existing asset..."
                              delete_response=$(curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$existing_asset_id")
                              echo "$delete_response"
                              if [ $? -eq 0 ] && ! echo "$delete_response" | grep -q "error"; then
                                  echo "Existing asset deleted successfully."
                              else
                                  echo "Failed to delete existing asset for $file. Skipping file upload..."
                                  rm -f centos-${version}.qcow2 centos${version}.qcow2
                                  continue
                              fi
                          else
                              echo "No existing $file file found in release."
                          fi
                          echo "Uploading $file to release..."
                          upload_response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Content-Type: application/octet-stream" \
                            -T "$file" \
                            "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$file")")
                          echo "Upload response: $upload_response"
                          if echo "$upload_response" | jq -e '.browser_download_url' > /dev/null 2>&1; then
                              echo "Successfully uploaded $file"
                              download_url=$(echo "$upload_response" | jq -r '.browser_download_url')
                              echo "Download URL: $download_url"
                          else
                              echo "Failed to upload $file"
                              echo "Response: $upload_response"
                          fi
                      else
                          echo "File $file does not exist, is too small (< 10MB), or is too large (> 2GB)"
                          if [ -f "$file" ]; then
                              file_size=$(stat -c %s "$file")
                              echo "File size: $file_size bytes"
                          fi
                      fi
                      echo "Cleaning up files for CentOS $version"
                      rm -f centos-${version}.qcow2 centos${version}.qcow2
                      echo "=== Completed processing CentOS $version ==="
                      echo ""
                  done
                  echo "All CentOS versions processed!"
