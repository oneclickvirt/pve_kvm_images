name: Build Alpine Cloud Images
on:
  schedule:
    - cron: "34 16 * * *"
  workflow_dispatch:

jobs:
  build_alpine_cloud_images:
    runs-on: pve-1
    steps:
      - uses: actions/checkout@v2

      - name: check path
        run: |
          pwd

      - name: Configure Git
        run: |
          git config --global user.name "daily-update"
          git config --global user.email "tg@spiritlhl.top"

      - name: Environment preparation
        run: |
          export LIBGUESTFS_DEBUG=1
          export LIBGUESTFS_TRACE=1
          export LIBGUESTFS_BACKEND=direct
          export LIBGUESTFS_BACKEND_SETTINGS="passt:no"
          sudo apt-get update
          sudo apt-get install -y curl wget unzip zip jq
          sudo apt-get install -y libguestfs-tools rng-tools curl axel
          sudo apt-get install -y libguestfs-tools rng-tools curl axel --fix-missing
          # Install additional tools for image creation
          sudo apt-get install -y debootstrap

      - name: Build Alpine Images
        run: |
          declare -A alpine_versions
          alpine_versions["3.20"]="3.20"
          alpine_versions["3.19"]="3.19"
          alpine_versions["3.18"]="3.18"
          
          # Function to try downloading from various sources
          try_download_alpine() {
              local version=$1
              local output_file=$2
              
              echo "Trying to download Alpine $version cloud image..."
              
              # URL patterns to try (in order of preference)
              local base_urls=(
                  "https://dl-cdn.alpinelinux.org/alpine/v${version}/releases/cloud/"
                  "https://images.linuxcontainers.org/images/alpine/${version}/amd64/cloud/"
                  "https://cloud-images.alpine.org/v${version}/"
              )
              
              local file_patterns=(
                  "alpine-cloud-${version}.0-x86_64.qcow2"
                  "alpine-cloud-${version}.1-x86_64.qcow2"
                  "alpine-cloud-${version}.2-x86_64.qcow2"
                  "alpine-cloud-${version}.3-x86_64.qcow2"
                  "alpine-cloud-${version}.4-x86_64.qcow2"
                  "alpine-cloud-${version}.5-x86_64.qcow2"
                  "alpine-virt-${version}.0-x86_64.qcow2"
                  "alpine-virt-${version}.1-x86_64.qcow2"
                  "alpine-standard-${version}.0-x86_64.qcow2"
                  "rootfs.squashfs"
                  "rootfs.tar.xz"
              )
              
              for base_url in "${base_urls[@]}"; do
                  for pattern in "${file_patterns[@]}"; do
                      url="${base_url}${pattern}"
                      echo "Trying: $url"
                      
                      if curl --head --fail --connect-timeout 10 --max-time 30 "$url" >/dev/null 2>&1; then
                          echo "Found valid URL: $url"
                          
                          # Download with axel first
                          if axel -n 8 -o "$output_file" "$url"; then
                              if [ -f "$output_file" ] && [ $(stat -c %s "$output_file") -gt 1048576 ]; then
                                  echo "Successfully downloaded with axel: $(stat -c %s "$output_file") bytes"
                                  return 0
                              fi
                          fi
                          
                          # Fallback to curl
                          if curl -L -o "$output_file" "$url"; then
                              if [ -f "$output_file" ] && [ $(stat -c %s "$output_file") -gt 1048576 ]; then
                                  echo "Successfully downloaded with curl: $(stat -c %s "$output_file") bytes"
                                  return 0
                              fi
                          fi
                          
                          # Clean up failed download
                          rm -f "$output_file"
                      fi
                  done
              done
              
              echo "Failed to download from any official source"
              return 1
          }
          
          # Function to create Alpine image from scratch
          create_alpine_image() {
              local version=$1
              local output_file=$2
              
              echo "Creating Alpine $version image from scratch..."
              
              # Create a minimal Alpine image
              qemu-img create -f qcow2 "$output_file" 2G
              
              # Try to use virt-make-fs if available, otherwise use alternative method
              if command -v virt-make-fs >/dev/null 2>&1; then
                  # Create a temporary directory
                  temp_dir=$(mktemp -d)
                  
                  # Download Alpine mini root filesystem
                  alpine_rootfs_url="https://dl-cdn.alpinelinux.org/alpine/v${version}/releases/x86_64/alpine-minirootfs-${version}.0-x86_64.tar.gz"
                  
                  echo "Downloading Alpine minirootfs: $alpine_rootfs_url"
                  if curl -L -o "${temp_dir}/alpine-minirootfs.tar.gz" "$alpine_rootfs_url"; then
                      cd "$temp_dir"
                      tar -xzf alpine-minirootfs.tar.gz
                      rm alpine-minirootfs.tar.gz
                      
                      # Create basic filesystem structure
                      mkdir -p proc sys dev tmp var/log etc/apk
                      
                      # Create a basic fstab
                      cat > etc/fstab << 'EOF'
          /dev/vda1 / ext4 defaults,noatime 0 1
          /dev/vda15 /boot/efi vfat defaults 0 2
          tmpfs /tmp tmpfs defaults,nodev,nosuid,noexec 0 0
          EOF
                      
                      # Create basic inittab for OpenRC
                      cat > etc/inittab << 'EOF'
          ::sysinit:/sbin/openrc sysinit
          ::sysinit:/sbin/openrc boot
          ::wait:/sbin/openrc default
          ::ctrlaltdel:/sbin/reboot
          ::shutdown:/sbin/openrc shutdown
          EOF
                      
                      # Use virt-make-fs to create the filesystem
                      virt-make-fs --format=qcow2 --size=2G . "../$output_file"
                      
                      cd - > /dev/null
                      rm -rf "$temp_dir"
                      
                      if [ -f "$output_file" ] && [ $(stat -c %s "$output_file") -gt 10485760 ]; then
                          echo "Successfully created Alpine image from minirootfs"
                          return 0
                      fi
                  fi
              fi
              
              echo "Failed to create Alpine image from scratch"
              rm -f "$output_file"
              return 1
          }
          
          for version in "3.20" "3.19" "3.18"; do
              echo "=== Processing Alpine $version ==="
              rm -f alpine-${version}.qcow2 alpine-${version}-custom.qcow2 alpine${version}.qcow2
              
              # Try to download existing cloud image first
              if try_download_alpine "$version" "alpine-${version}.qcow2"; then
                  echo "Downloaded existing cloud image for Alpine $version"
              else
                  echo "No existing cloud image found, trying to create one..."
                  if create_alpine_image "$version" "alpine-${version}.qcow2"; then
                      echo "Created custom Alpine $version image"
                  else
                      echo "Failed to obtain Alpine $version image, skipping..."
                      continue
                  fi
              fi
              
              if [ ! -f "alpine-${version}.qcow2" ] || [ $(stat -c %s "alpine-${version}.qcow2") -lt 10485760 ]; then
                  echo "Alpine $version image is too small or doesn't exist, skipping..."
                  rm -f alpine-${version}.qcow2
                  continue
              fi
              
              chmod 644 alpine-${version}.qcow2
              echo "Alpine $version image ready: $(stat -c %s alpine-${version}.qcow2) bytes"
              
              echo "Customizing Alpine $version image"
              
              # First, ensure the image is bootable and has basic tools
              virt-customize -a alpine-${version}.qcow2 \
                --smp 2 \
                --timezone Asia/Hong_Kong \
                --run-command "apk update || echo 'apk update failed, continuing...'" \
                --run-command "apk add openrc util-linux || echo 'Failed to add basic packages'" \
                --run-command "apk add sudo qemu-guest-agent bash-completion unzip wget curl net-tools iputils nano screen less vim bzip2 mtr htop bind-tools zstd cronie lsof openssh || echo 'Failed to add some packages'" \
                --run-command "rc-update add devfs boot || echo 'devfs add failed'" \
                --run-command "rc-update add dmesg boot || echo 'dmesg add failed'" \
                --run-command "rc-update add mdev sysinit || echo 'mdev add failed'" \
                --run-command "rc-update add hwclock boot || echo 'hwclock add failed'" \
                --run-command "rc-update add modules boot || echo 'modules add failed'" \
                --run-command "rc-update add sysctl boot || echo 'sysctl add failed'" \
                --run-command "rc-update add hostname boot || echo 'hostname add failed'" \
                --run-command "rc-update add bootmisc boot || echo 'bootmisc add failed'" \
                --run-command "rc-update add syslog boot || echo 'syslog add failed'" \
                --run-command "rc-update add qemu-guest-agent boot || echo 'qemu-guest-agent add failed'" \
                --append-line "/etc/conf.d/ntpd:NTPD_OPTS=\"-N -p time.apple.com -p time.windows.com\"" \
                --run-command "apk cache clean || echo 'cache clean failed'" \
                --delete "/var/log/*.log" \
                --delete "/var/cache/apk/*" \
                --truncate "/etc/machine-id"
                
              if [ $? -ne 0 ]; then
                  echo "Basic customization failed for Alpine $version, trying minimal setup..."
                  
                  # Try minimal customization
                  virt-customize -a alpine-${version}.qcow2 \
                    --run-command "apk update && apk add openrc openssh sudo" \
                    --run-command "rc-update add sshd boot" \
                    --run-command "echo 'root:oneclickvirt' | chpasswd"
                  
                  if [ $? -ne 0 ]; then
                      echo "Even minimal customization failed for Alpine $version, skipping..."
                      rm -f alpine-${version}.qcow2
                      continue
                  fi
              fi
              
              echo "Configuring SSH and root access for Alpine $version..."
              sudo virt-customize -a alpine-${version}.qcow2 \
                --run-command "rc-update add sshd boot || echo 'sshd service add failed'" \
                --run-command "sed -i 's/#PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config" \
                --run-command "sed -i 's/#PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config" \
                --run-command "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config" \
                --run-command "sed -i 's/#Port 22/Port 22/g' /etc/ssh/sshd_config" \
                --run-command "echo 'root:oneclickvirt' | chpasswd" \
                --run-command "echo '' > /etc/motd" \
                --run-command "echo 'Modified from https://github.com/oneclickvirt/pve_kvm_images' >> /etc/motd" \
                --run-command "echo 'Related repo https://github.com/spiritLHLS/pve' >> /etc/motd" \
                --run-command "echo '--by https://t.me/spiritlhl' >> /etc/motd"
              
              echo "Compressing Alpine $version image"
              virt-sparsify --compress alpine-${version}.qcow2 alpine-${version}-custom.qcow2
              if [ $? -ne 0 ]; then
                  echo "Compression failed, using original image"
                  cp alpine-${version}.qcow2 alpine-${version}-custom.qcow2
              fi
              
              mv alpine-${version}-custom.qcow2 alpine${version}.qcow2
              ls -lh alpine${version}.qcow2
              
              file="alpine${version}.qcow2"
              if [ -f "$file" ] && [ $(stat -c %s "$file") -gt 10485760 ] && [ $(stat -c %s "$file") -le 2147483648 ]; then
                  echo "Processing file: $file"
                  release_id=$(curl -s -m 6 -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/tags/alpine" | jq -r '.id')
                  if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
                      echo "Release 'alpine' not found, please create it first"
                      rm -f alpine-${version}.qcow2 alpine${version}.qcow2
                      continue
                  fi
                  
                  echo "Found release ID: $release_id"
                  echo "Checking if $file already exists in release..."
                  existing_asset_id=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | jq -r --arg name "$(basename "$file")" '.[] | select(.name == $name) | .id')
                  
                  if [ -n "$existing_asset_id" ] && [ "$existing_asset_id" != "null" ]; then
                      echo "Asset $file already exists in release, deleting existing asset..."
                      delete_response=$(curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$existing_asset_id")
                      echo "$delete_response"
                      if [ $? -eq 0 ] && ! echo "$delete_response" | grep -q "error"; then
                          echo "Existing asset deleted successfully."
                      else
                          echo "Failed to delete existing asset for $file. Skipping file upload..."
                          rm -f alpine-${version}.qcow2 alpine${version}.qcow2
                          continue
                      fi
                  else
                      echo "No existing $file file found in release."
                  fi
                  
                  echo "Uploading $file to release..."
                  upload_response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/octet-stream" \
                    -T "$file" \
                    "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$file")")
                  echo "Upload response: $upload_response"
                  
                  if echo "$upload_response" | jq -e '.browser_download_url' > /dev/null 2>&1; then
                      echo "Successfully uploaded $file"
                      download_url=$(echo "$upload_response" | jq -r '.browser_download_url')
                      echo "Download URL: $download_url"
                  else
                      echo "Failed to upload $file"
                      echo "Response: $upload_response"
                  fi
              else
                  echo "File $file does not exist, is too small (< 10MB), or is too large (> 2GB)"
                  if [ -f "$file" ]; then
                      file_size=$(stat -c %s "$file")
                      echo "File size: $file_size bytes"
                  fi
              fi
              
              echo "Cleaning up files for Alpine $version"
              rm -f alpine-${version}.qcow2 alpine${version}.qcow2
              echo "=== Completed processing Alpine $version ==="
              echo ""
          done
          echo "All Alpine versions processed!"
